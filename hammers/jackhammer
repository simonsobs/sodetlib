#!/usr/bin/env python3

import argparse
import subprocess
import shlex
import yaml
import sys
import time
import os


class TermColors:
    HEADER = '\n\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def cprint(msg, style=TermColors.OKBLUE):
    if style == True:
        style = TermColors.OKGREEN
    elif style == False:
        style = TermColors.FAIL
    print(style + str(msg) + TermColors.ENDC)


# This should be the same for every smurf-srv
cwd=os.environ['OCS_CONFIG_DIR']
sys_config_file = os.path.join(os.environ['OCS_CONFIG_DIR'], 'sys_config.yml')

with open(sys_config_file, 'r') as stream:
    sys_config = yaml.safe_load(stream)

########################################################################
# Various utility functions
########################################################################


def util_run(cmd, args=[], name=None, rm=True, **run_kwargs):
    cmd  = f'docker-compose run --entrypoint={cmd} '
    if name is not None:
        cmd += f'--name={name} '
    if rm:
        cmd += '--rm '
    cmd += f'smurf-util {" ".join(args)}'
    return subprocess.run(shlex.split(cmd), cwd=cwd, **run_kwargs)


def check_epics_connection(epics_server, retry=False):
    """
        Checks if we can connect to a specific epics server. 

        Args:
            epics_server (string): 
                epics server to connect to
            retry (bool):
                If true, will continuously check until a connection has been 
                established.
    """
    if retry:
        print(f"Waiting for epics connection to {epics_server}", end='', flush=True)
        while True:
            x = util_run(
                'caget', args=[f'{epics_server}:AMCc:enable'],
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT
            )
            if "True" in x.stdout.decode():
                break
            print('.', end='', flush=True)

        print("\nConnected!")
        return True
    else:
        x = util_run(
            'caget', args=[f'{epics_server}:AMCc:enable'],
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT
        )
        return "True" in x.stdout.decode()


def get_running_dockers(get_all=True):
    """
        Gets all currently running dockers. 

        Returns: 
            A list of tuples of the (cid, image, name)
    """
    cmd = 'docker ps '
    if get_all:
        cmd += '-a '
    x = subprocess.run(cmd.split(), stdout=subprocess.PIPE)
    containers=[]
    for line in x.stdout.decode().split('\n')[1:]:
        if not line:
            continue

        cid, image, *_, cname = line.split()
        containers.append((cid, image, cname))

    return containers


def kill_bad_dockers(slots, ocs=False, names=[], images=[]):
    """
        Kills relevant dockers for a given set of slots.

        Args: 
            slots (list of ints):
                list of slots which we should kill related dockers
            ocs (bool): 
                If true, will also kill ocs-related dockers
            names (list of strings): 
                List of additional docker names we should kill
            images (list of strings):
    """

    print(f"Killing bad dockers for slots {slots}")
    bad_names = names

    for slot in slots:
        # conflicting names created by jackhammer
        bad_names.append(f'smurf-streamer-s{slot}')
        bad_names.append(f'pysmurf-client-s{slot}')

        # conflicting names created by shawnhammer
        bad_names.append(f"pysmurf_s{slot}")
        bad_names.append(f"smurf_server_s{slot}")

        bad_names.append(f"pysmurf-ipython-slot{slot}")

        if ocs:
            bad_names.append(f'ocs-pysmurf-s{slot}')
    if ocs:
        bad_names.append('ocs-pysmurf-monitor')

    bad_images = images

    containers = get_running_dockers()

    for cid, full_image, name in containers:
        # This will usually get the real image name. 
        # We want 'pysmurf-server' from 'tidair/pysmurf-server:R0.0.0'
        image = full_image.split('/')[-1].split(':')[0]

        if (name in bad_names) or (image in bad_images):
            print(f"Stopping docker {name} ({image})")
            subprocess.run(f'docker stop {cid}'.split())
            subprocess.run(f'docker rm {cid}'.split())

def run_on_shelf_manager(cmd_str):
    """ Runs a command on the shelf manager. Takes in the command as a string"""
    cmd = ['ssh', f'root@{sys_config["shelf_manager"]}', f'{cmd_str}']
    print(cmd)
    subprocess.run(cmd)

def enter_pysmurf(slot, agg=False):
    """
        Enters into a pysmurf ipython session.

        Args: 
            slot (int): slot to enter into
            agg (bool): if true, use the matplotlib agg backend.
    """
    print(f"Entering pysmurf on slot {slot}", flush=True)
    name = f'pysmurf-ipython-slot{slot}'
    container_names = [c[2] for c in get_running_dockers()]
    active_container_names = [c[2] for c in get_running_dockers(get_all=False)]

    if name in active_container_names:
        print(f"Container {name} is already running... Attaching to it now")
        cmd = shlex.split(f'docker attach {name}')
        subprocess.run(cmd, cwd=cwd)
    else:
        if name in container_names:
            print(f"Removing stopped docker {name}")
            subprocess.run(f'docker rm {name}'.split())

        util_run(
            'python3',
            args=f"/sodetlib/hammers/scripts/start_pysmurf_ipython.py -N {slot}".split(),
            name=name, rm=False
        )


def start_services(services, write_env=False):
    """
        Starts docker-compose services

        Args:
            services (list or str): docker-compose services to restart
            write_env(bool):
                If true, will write sys_config['docker-env'] to the
                $OCS_CONFIG_DIR/.env file. This is so the most recent
                environment variables can be used by standard docker-compose
                commands.
    """
    docker_env = sys_config.get('docker_env')

    # Writes docker_env to $OCS_CONFIG_DIR/.env so docker-compose still works
    if write_env and docker_env is not None:
        with open(os.path.join(os.environ["OCS_CONFIG_DIR"], ".env"), "w") as env_file:
            for k,v in docker_env.items():
                env_file.write(f'{k}={v}\n')

    if isinstance(services, str):
        services = [services]

    cmd = 'docker-compose up -d'.split()
    cmd.extend(services)

    subprocess.run(cmd, cwd=cwd)


########################################################################
# jackhammer subcommand entrypoints
########################################################################

# Entrypoint for jackhammer pysmurf
def pysmurf_func(args):
    available_slots = sys_config['slot_order']

    if args.slot is not None:
        if args.slot not in available_slots:
            print(f"Slot {args.slot} is not listed in the available smurf_slots in {sys_config_file}")
            raise ValueError
        slot = args.slot
    else:
        slot = available_slots[0]

    enter_pysmurf(slot, agg=args.agg)


# Entrypoint for jackhammer soft_reset
def softreset_func(args):
    containers = get_running_dockers()

    # If no slots are specified reset all slots
    if not args.slots:
        args.slots = sys_config['slot_order']

    kill_bad_dockers(args.slots, ocs=args.ocs)

    print("Running docker-compose up....")

    services = ['ocs-pysmurf-monitor', 'smurf-util']
    for slot in sys_config['slot_order']:
        services.append(f'smurf-streamer-s{slot}')
        services.append(f'ocs-pysmurf-s{slot}')

    start_services(services, write_env=True)

    for slot in args.slots:
        check_epics_connection(f'smurf_server_s{slot}', retry=True)

    enter_pysmurf(args.slots[0])


# Entrypoint for jackhammer hard_reset
def hardreset_func(args):
    print("Not implemented....")
    pass


# Entrypoint for jackhammer hammer
def hammer_func(args):
    # here we go....
    slots = sys_config['slot_order']
    cprint("Killing conflicting dockers", style=TermColors.HEADER)
    kill_bad_dockers(slots, ocs=True)

    cprint("Restarting smurf-util", style=TermColors.HEADER)
    # Restarts smurf-util to clean up any running processes
    subprocess.run('docker stop smurf-util'.split(), cwd=cwd)
    subprocess.run('docker rm smurf-util'.split(), cwd=cwd)
    start_services('smurf-util', write_env=True)

    # Sets fan levels on crate
    cprint("Setting fan levels", style=TermColors.HEADER)
    if sys_config['startup']['set_crate_fans_to_full']:
        cmd = f'clia minfanlevel {sys_config["max_fan_level"]}; '
        cmd += f'clia setfanlevel all {sys_config["max_fan_level"]}'

        print("Setting crate fans to full...")
        run_on_shelf_manager(cmd)

    if sys_config['startup']['reboot'] and (not args.no_reboot):
        cprint("Rebooting all slots", style=TermColors.HEADER)

        deactivate_commands = []
        activate_commands = []
        for slot in slots:
            deactivate_commands.append(f'clia deactivate board {slot}')
            activate_commands.append(f'clia activate board {slot}')

        print(f"Deactivating carriers: {slots}")
        run_on_shelf_manager('; '.join(deactivate_commands))

        print("Waiting 5 seconds before re-activating carriers")
        time.sleep(5)

        print(f"Activating carriers: {slots}")
        run_on_shelf_manager('; '.join(activate_commands))

        print("Waiting for carriers to come back online (this takes a bit)")        
        for slot in slots:
            ip = f'10.0.{sys_config["crate_id"]}.{slot + 100}'
            subprocess.run(['ping_carrier', ip])
    else:
        print("Skipping reboot process")
    
    #Brings up all smurf-streamer dockers
    cprint('Bringing up smurf dockers', style=TermColors.HEADER)

    services = ['ocs-pysmurf-monitor', 'smurf-util']
    for slot in sys_config['slot_order']:
        services.append(f'smurf-streamer-s{slot}')
        services.append(f'ocs-pysmurf-s{slot}')

    start_services(services)

    # Waits for streamer-dockers to start
    print("Waiting for server dockers to connect. This might take a few minutes...")
    for slot in sys_config['slot_order']:
        epics_server = f'smurf_server_s{slot}'
        check_epics_connection(epics_server, retry=True)

    print("All streamers have started!")
    if sys_config['startup']['configure_pysmurf']:
        cprint("Configuring pysmurf", style=TermColors.HEADER)
        for slot in sys_config['slot_order']:
            print(f"Configuring pysmurf on slot {slot}...")

            util_run('python3',
                     args=f'/sodetlib/hammers/scripts/setup_pysmurf.py -N {slot}'.split())
        print("Finished configuring pysmurf!")

    # Enters into an ipython notebook for the first specified slot   
    cprint(f"Entering pysmurf slot {slots[0]}", style=TermColors.HEADER)
    enter_pysmurf(slots[0], agg=args.agg)


# Entrypoint for jackhammer logs
def log_func(args):
    cmd = shlex.split('docker-compose logs -f')
    cmd.extend(args.log_args)
    subprocess.run(cmd, cwd=cwd)


# Entrypoint for jackhamer util
def util_func(args):
    util_run('bash')


def gui_func(args):
    if args.port is not None:
        server_port = args.port
    else:
        if args.slot is not None:
            server_port = 9000 + 2 * args.slot
        else:
            server_port = 9099
    subprocess.run(f'/home/cryo/sodetlib/hammers/scripts/run_gui.sh {server_port}'.split())


# Entrypoint for jackhammer dump
def dump_func(args):
    dump_dir = os.path.join(
        '/data/logs',
        str(time.time())[:5],
        str(int(time.time()))
    )

    if not os.path.exists(dump_dir):
        os.makedirs(dump_dir)

    docker_state_file = os.path.join(dump_dir, 'docker_state.log')
    with open(docker_state_file, 'w') as f:
        print(f"Saving 'docker ps' to {docker_state_file}")
        subprocess.run('docker ps -a'.split(), stdout=f, stderr=f)

    for cid, image, name in get_running_dockers(get_all=True):
        log_file = os.path.join(dump_dir, f'{name}.log')
        with open(log_file, 'w') as f:
            print(f"Saving {name} logs to {log_file}")
            subprocess.run(f'docker logs {cid}'.split(), stdout=f, stderr=f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    ########### Jackhammer pysmurf parser ############
    pysmurf_parser = subparsers.add_parser('pysmurf', 
        help="Drops user into ipython session with pysmurf already initialized"
    )
    pysmurf_parser.set_defaults(func=pysmurf_func)
    pysmurf_parser.add_argument('slot', type=int, nargs="?", 
        help="Slot number of pysmurf to connect to. If left blank it will "
             "try to figure it out from the sys_config file."
    )
    pysmurf_parser.add_argument('--config-file', '-c', 
        help="Pysmurf config file. Defaults to what is specified in sys config file."
    )
    pysmurf_parser.add_argument('--setup', '-s', action='store_true', 
        help="If specified, pysmurf will start with setup=True."
    )
    pysmurf_parser.add_argument('--agg', action='store_true', 
        help="If specified, matplotlib will use the agg backend. This can be "
             "helpful if you are connecting over ssh without a display."
    )

    ########### Jackhammer soft_reset parser ############
    softreset_parser = subparsers.add_parser('soft_reset', 
        help="Resets the smurf_server backends and makes sure ocs dockers are running."
    )
    softreset_parser.set_defaults(func=softreset_func)
    softreset_parser.add_argument('slots', nargs="*", 
        help="Slots to reset. If not specified, will reset all of them."
    )
    softreset_parser.add_argument('--ocs', action='store_true',
        help="If specified, ocs agents will also be restarted. If not, they will "
             "be left running."
    )

    ########### Jackhammer hard_reset parser ############
    hardreset_parser = subparsers.add_parser('hard_reset')
    hardreset_parser.set_defaults(func=hardreset_func)
    hardreset_parser.add_argument('slots', nargs="*", 
        help="Slots to reset. If not specified, will reset all of them."
    )
    hardreset_parser.add_argument('--ocs', action='store_true',
        help="If specified, ocs agents will also be restarted. If not, they will "
             "be left running."
    )

    ########### Jackhammer hammer parser ############
    hammer_parser = subparsers.add_parser("hammer")
    hammer_parser.set_defaults(func=hammer_func)
    hammer_parser.add_argument('--no-reboot', '-n', action='store_true')
    hammer_parser.add_argument('--agg', action='store_true')

    ########### Jackhammer logs parser ############
    log_parser = subparsers.add_parser('logs')
    log_parser.add_argument('log_args', nargs="*", type=str, help="args passed to docker-compose logs")
    log_parser.set_defaults(func=log_func)

    ########### Jackhammer util parser ############
    util_parser = subparsers.add_parser('util')
    util_parser.set_defaults(func=util_func)

    ########### Jackhammer gui parser ###########
    gui_parser = subparsers.add_parser('gui')
    gui_parser.add_argument('slot', nargs='?', type=int)
    gui_parser.add_argument('--port', '-p', type=int, help='gui server port')
    gui_parser.set_defaults(func=gui_func)


    ########### Jackhammer dump parser ###########
    dump_parser = subparsers.add_parser('dump', help='Dumps all docker logs')
    dump_parser.set_defaults(func=dump_func)

    args = parser.parse_args()
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

